Selectores CSS:

    Selector universal * Sirve para agregar estilos a todos los elementos de la página. Normalmente se utiliza para hacer “reset” de estilos.
    Selector etiqueta. Aplica estilos a todos los elementos de ese tipo (p, h1, header etc.)
    Selector id. Aplica estilos a un elemento único con ese Id, se recomienda hacer buen uso de este selector.
    Selector clase. Aplica estilos a todos los elementos con esa clase (el que más vas a usar).
    Selector anidado. Aplica estilos a un elementos descendientes de otros elementos (no necesario que sea hijo directo).
    Selector hijo >. Aplica estilos a los elementos que sean hijos directos de otros.
    Selector adyacente +. Aplica estilos al elemento adyacente.
    Selector de atributo input[type=“number”]. Aplica estilos al elemento con el atributo especificado.
    La prioridad de un selector se determina por la suma de su contenido:

    ID = 100
    Clase = 10
    Etiqueta = 1
    A mayor la suma, mayor prioridad.

    !important es un valor especial tiene un valor de un millón, nunca lo uses a menos que sea tu única opción como cuando no tienes acceso al código fuente.


BEM 
    el objetivo es dividir lógicamente las piezas de las que se compone una web.

    BEM establece que debemos usar clases para nuestro selectores, clases que se dividen en:

    -Bloques: Los bloques son nuestros contenedores más grandes que a su vez contienen elementos u otros bloques.
    -Elemento: Los elementos siempre forman parte de un bloque, normalmente son los botones, textos, imágenes etc.
    -Modificadores: Los modificadores se usan para establecer estilos diferentes a un mismo bloque o elemento.

    uso:
        -.bloque__element--modificador{}

Instalar Pug
    -Si quieres utilizar pug sin prepros y por terminal debes:

    Instalarlo
        -npm i pug-cli -g
    Compilar
        -pug -w --pretty landing.pug

Utilizar Pug
    -insertamos la carpeta en prepros (software que descargamos)


Instalar SASS
    -npm install -g sass

compilar SASS
    -sass --watch ejercicio-sass.scss ejercicio-sass.css

uso de sass

    para evitar que el preprocesador compile el archiv
    creamos el archivo con "_" al inicio del _nombre

    ej:
        _globales.scss
        _estadistica.scss
        _perfil.scss

    elementos anidados: sass permite anidar componentes hijos

        .perfil {
            width: 50%;
            padding-top: 50px;
            // .perfil__avatar {
            // 	display: block;
            // }

            // Con ampersand le decimos que lo siguiente
            //es lo mismo que decir .perfil__avatar{}
            &__avatar {
                display: block;
            }

            &__nombre {
                text-transform: uppercase;
                text-align: center;
            }
        }

    variables: es posible utilizar variables

        //Fuentes 
        $Fuente1: 'Lato', sans-serif;
        $Fuente2: 'Oswald', sans-serif;

        //colores
        $color-primario: #333333;
        $color-claro: #ffffff;
        $color-secundario: #8841DA;
        $color-variacion:#3f579a;

        body{
            margin: 0;
            font-family: $Fuente1;
        }

        .ubicacion--perfil{
            width: 50%;
            height: 90px;
            background-color: $color-claro;
            color: #333333;

            i{
                display: block;
                color: $color-variacion;
            }

            h2 {
                text-transform: uppercase;
                font-weight: 600;
                font-size: 20px;
                font-family: $Fuente2;
            }

            h3 {
                text-transform: uppercase;
                font-size: 12px;
                font-family: $Fuente2;
            }
        }

    Herencia: Tambien es posible es posible heredar para conservar los estilos de otro bloque

        .perfil__minibio {
            margin: 0 auto;
            padding-top: 20px;

            h2 {
                @extend .perfil__nombre;
            }

            h3 {
                @extend .perfil__titulo;
            }

        }
    
    Modularizar: con import podemos hacer modulos
         llevamos el contenido del archivo a una carpeta e importamos en 
         el archivo principal para obtener los estilo

        @import "../componentes/globales.scss";
        @import "../componentes/perfiles";
        @import "../componentes/estadisticas";
        @import "../componentes/ubicaciones";


    Mixin: los mixin son bloques de codigo que reutilizaremos dentro del proyecto
    para ocasionar que elestilo en los elementos se repita

        En el archivo global declaramos el mixin

        @mixin caja {
            color: $color-primario;
            background-color: $color-claro;
            border-radius: 20px;
            box-shadow: 0px 20px 33px 0px rgba(0,0,0,0.50);
        }

        ahora para llevarlo a los componentes lo llamamos con @include

        .ubicacion--perfil{
            width: 50%;
            height: 90px;
            margin: 30px auto;
            padding: 20px 0 0 50px;
            // border-radius: 20px;
            // background-color: $color-claro;
            // color: #333333;
            @include caja;
        }


    Funciones :
    
        podemos crear funciones en el global de la siguiente forma

        @function get-opacity($color, $nivel){

            @return rgba($color, $nivel);
        }

        ahora en los demas archivos llamamos nuestra funcion

        &__titulo {
            display:block;
            text-transform: uppercase;
            color: get-opacity($color-claro, .50);
        }

        &__boton {
            display: block;
            width: 100px;
            color: get-opacity($color-primario, 0.20);
            border: 2px solid get-opacity($color-claro, 0.30);
        }

    Condicionales:
        @mixin titulos($fuente) {
            @if ($fuente == $Fuente1){
                font-family: $Fuente1;
            } @else {
                font-family: $Fuente2;
                text-transform: uppercase;
            }
        }

        h2 {
            margin-bottom: 10px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
            @include titulos($Fuente2);
        }
            

    Loops:
        los loops en sass no requieren ser llamados

        //esto aplicara para todos los h1, h2 y h3 del proyecto
        @each $header, $size in (h1:30px, h2:25px, h3:20px){
            #{$header} {
                font-size: $size;
                margin: 0;
            }
        }